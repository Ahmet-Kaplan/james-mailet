<?xml version="1.0"?>
<!-- 
  Licensed to the Apache Software Foundation (ASF) under one   
  or more contributor license agreements.  See the NOTICE file 
  distributed with this work for additional information        
  regarding copyright ownership.  The ASF licenses this file   
  to you under the Apache License, Version 2.0 (the            
  "License"); you may not use this file except in compliance   
  with the License.  You may obtain a copy of the License at   
                                                               
    http://www.apache.org/licenses/LICENSE-2.0                 
                                                               
  Unless required by applicable law or agreed to in writing,   
  software distributed under the License is distributed on an  
  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY       
  KIND, either express or implied.  See the License for the    
  specific language governing permissions and limitations      
  under the License.                                           
-->

<project default="main" basedir=".">
    <!--
    Give user a chance to override without editing this file
    (and without typing -D each time he compiles it)
    -->
    <property file=".ant.properties"/>
    <property file="${user.home}/.ant.properties"/>
    <property file="include.properties"/>
    <property file="default.properties"/>

    <!--
    ===================================================================
    Set the classpath
    ===================================================================
    -->

    <path id="project.class.path">
        <pathelement path="${junit.jar}"/>
        <pathelement path="${javax-mail.jar}"/>
        <pathelement path="${javax-activation.jar}"/>
        <pathelement path="${mailet.jar}"/>
        <pathelement path="${mailet-base.jar}"/>
        <pathelement path="${bc-workaround.jar}"/>
        <pathelement path="${bc.jar}"/>
        <pathelement path="${java.class.path}" />
        <pathelement path="${build.classes}" />
    </path>

    <!--
    ===================================================================
                                  Main target
    ===================================================================
    -->
    <target name="main" depends="dist-lite"/>

    <!--
    ===================================================================
    Prepare-common target - common tasks executed in preparation for
    all targets
    ===================================================================
    -->
    <target name="prepare">

      <echo message="Preparing code"/>

      <tstamp/>
      <mkdir dir="${dist.dir}"/>
      <copy todir="${dist.dir}">
        <fileset dir=".">
          <include name="LICENSE.txt"/>
          <include name="README.txt"/>
          <include name="NOTICE.txt"/>
        </fileset>
      </copy>
      <fixcrlf srcdir="${java.dir}" includes="**/*.java" eol="lf" tab="remove" tablength="4" />
      <fixcrlf srcdir="${java.dir}" includes="**/*.html" eol="lf" tab="remove" tablength="4" />
      <mkdir dir="${build.src}"/>
    </target>

    
    <!--
    ===================================================================
                                  compile
    ===================================================================
    -->
    <target name="compile" depends="compile-main"/>
    
    <target name="compile-main" depends="prepare">
      <echo message="Compiling Java sources"/>
      <mkdir dir="${build.classes}"/>
      <javac 
            destdir="${build.classes}" 
            debug="${debug}" 
            optimize="${optimize}" 
            deprecation="${deprecation}"
            source="${jdk.source}"
            target="${jdk.target}" 
            >
        <classpath refid="project.class.path"/>
        <src path="${build.src}"/>
        <src path="${java.dir}"/>
        <include name="org/apache/james/**"/>
      </javac>
      <copy todir="${build.classes}">
        <fileset dir="${java.dir}">
          <include name="**/*.properties"/>
        </fileset>
      </copy>   
      <copy todir="${build.classes}/META-INF" file='LICENSE.txt'/>
      <copy todir="${build.classes}/META-INF" file='NOTICE.txt'/>   
    </target>

    <!--
    ===================================================================
                                  Javadocs
    ===================================================================
    -->
    <target name="javadocs" depends="compile">

      <echo message="Making Mailet Javadocs"/>

      <delete dir="${build.javadocs}"/>
      <mkdir dir="${build.javadocs}"/>
      <javadoc 
      		failonerror="yes" 
      		packagenames="org.apache.james.*" 
      		destdir="${build.javadocs}">
        <sourcepath>
            <pathelement path="${java.dir}"/>
            <pathelement path="${build.src}"/>            
        </sourcepath> 
        <classpath refid="project.class.path"/>
        <doclet name="com.sun.tools.doclets.standard.Standard">
          <param name="-author"/>
          <param name="-version"/>
          <param name="-use"/>
          <param name="-breakiterator"/>
          <param name="-link" value="http://java.sun.com/j2se/1.4/docs/api"/>
          <param name="-link" value="http://java.sun.com/j2ee/sdk_1.3/techdocs/api"/>
          <param name="-doctitle" value="${Name} ${version}"/>
          <param name="-windowtitle" value="${Name} API"/>
          <param name="-bottom" value="&quot;Licensed to the Apache Software Foundation. Distributed under the Apache License, 2.0.&quot;"/>
        </doclet>
      </javadoc>
    </target>
	
    <!--
    ===================================================================
                                  Build all distributions
    ===================================================================
    -->
    <target name="dist" depends="clean,dist-bin,dist-src"/>

    <!--
    ===================================================================
                                  Make Mailet jars
    ===================================================================
    -->

    <target name="jar" depends="compile, test">

      <mkdir dir="${build.lib}"/>

      <!-- Make Mailet jar-->
      <echo message="Making Mailet Jar (${name}-${version}.jar)"/>
      <jar 
            jarfile="${build.lib}/${project}-${name}-${version}.jar" 
            basedir="${build.classes}">
          <include name="org/apache/james/**"/>
          <include name="META-INF/**"/> 
          <exclude name="**/junit/*/**"/>
          <exclude name="**/samples/*/**"/>
          <manifest> 
            <attribute name="Extension-Name" value='${extension.name}'/>
            <attribute name="Specification-Title" value='${title.spec}'/>
            <attribute name="Specification-Vendor" value='${vendor}'/>
            <attribute name="Specification-Version" value='${manifestVersion}'/>
            <attribute name="Implementation-Vendor-Id" value='${vendor.id}'/>
            <attribute name="Implementation-Title" value='${title.impl}'/>
            <attribute name="Implementation-Vendor" value='${vendor}'/>
            <attribute name="Implementation-Version" value='${manifestVersion}'/>
            <attribute name="X-Compile-Source-JDK" value='${jdk.source}'/>
            <attribute name="X-Compile-Target-JDK" value='${jdk.target}'/> 
          </manifest>
      </jar>


      <echo message="Making Mailet Test Jar (${name}-${version}-tests.jar)"/>
      <jar 
            jarfile="${build.lib}/${name}-${version}-tests.jar" 
            basedir="${test.classes}">
          <include name="org/apache/**"/>
          <include name="META-INF/**"/> 
      </jar>

    </target>

    <!--
    ===================================================================
            Make dist directory with unpacked dist ready to run
    ===================================================================
    -->
    

    <target name="dist-lite" depends="jar">

      <echo message="Installing Mailet to ${dist.dir}"/>

      <!--Copies the Mailet jars into ./dist/lib -->
      <copy todir="${dist.dir}/lib">
        <fileset dir="${build.lib}">
          <include name="*.jar"/>
        </fileset>
      </copy>
    </target>

    

    <!--
    ===================================================================
                                  binary distribution
    ===================================================================
    -->

    <target name="dist-bin" depends="dist-lite, javadocs">
      <echo message ="Building binary distribution"/>
      <property name="dist.binary.dir" value="${dist.dir}/downloads/bin"/>
      <mkdir dir="${dist.binary.dir}"/>
        <zip zipfile="${dist.binary.dir}/${dist.name}-bin.zip">
            <fileset dir="${dist.dir}">
                <include name="lib/**"/>
                <include name="*.txt"/>
                <include name="KEYS"/>
            </fileset>
        </zip>
        <tar longfile="gnu" tarfile="${dist.binary.dir}/${dist.name}-bin.tar">
            <tarfileset dir="${dist.dir}" username="${name}" group="${name}">
                <include name="lib/**"/>
                <include name="*.txt"/>
                <include name="KEYS"/>
            </tarfileset>
        </tar>
        <gzip zipfile="${dist.binary.dir}/${dist.name}-bin.tar.gz" src="${dist.binary.dir}/${dist.name}-bin.tar"/>
        <delete file="${dist.binary.dir}/${dist.name}-bin.tar"/>
    </target>

    <!--
    ===================================================================
                                  source distributions
    ===================================================================
    -->
    <target name="dist-src" depends="dist-lite, javadocs">
        <echo message ="Building source distributions"/>

        <property name="dist.source.dir" value="${dist.dir}/downloads/src"/>
        <mkdir dir="${dist.source.dir}"/>
        <zip zipfile="${dist.source.dir}/${dist.name}-src.zip">
            <fileset dir=".">
                <include name="src/**"/>
                <include name="lib/**"/>
                <include name="www/**"/>
                <include name="tools/**"/>
                <include name="*.xml"/>
                <include name="*.properties"/>
                <include name="*.txt"/>
                <include name="KEYS"/>
            </fileset>
        </zip>
        <tar longfile="gnu" tarfile="${dist.source.dir}/${dist.name}-src.tar">
            <tarfileset dir="." username="${name}" group="${name}">
                <include name="src/**"/>
                <include name="lib/**"/>
                <include name="www/**"/>
                <include name="tools/**"/>
                <include name="*.xml"/>
                <include name="*.properties"/>
                <include name="*.txt"/>
                <include name="KEYS"/>
            </tarfileset>
        </tar>
        <gzip zipfile="${dist.source.dir}/${dist.name}-src.tar.gz" src="${dist.source.dir}/${dist.name}-src.tar"/>
        <delete file="${dist.source.dir}/${dist.name}-src.tar"/>
    </target>
    
    <!--
    ===================================================================
                                  delete dist/, build/ and www/
    ===================================================================
    -->
    <target name="clean">
        <echo message ="deleting working directories ready for a clean build"/>
        <delete dir="${dist.dir}"/>
        <delete dir="${build.dir}"/>
        <delete dir="${www.dir}"/>
    </target>

    <!--
    ===================================================================
                                   Help on usage                                                       
    =================================================================== 
    -->
    <target name="usage">
        <echo message=""/>
        <echo message=""/>
        <echo message="Mailet Build file"/>
        <echo message="-------------------------------------------------------------"/>
        <echo message=""/>
        <echo message=" available targets are:"/>
        <echo message=""/>
        <echo message="   dist-lite --> generates unpacked distribution (default)"/>
        <echo message="   test      --> tests the compiled classes"/>
        <echo message="   website   --> makes all the docs and javadocs"/>
        <echo message="   compile   --> compiles the source code"/>
        <echo message="   dist      --> generates all the distributions, packed"/>
        <echo message="   clean     --> cleans up the directory"/>
        <echo message="   javadocs  --> creates the Javadoc"/>
        <echo message=""/>
        <echo message=" See the comments inside the build.xml file for more details."/>
        <echo message="-------------------------------------------------------------"/>
        <echo message=""/>
        <echo message=""/>
    </target>
    
    <!--
       ===================================================================
                                      Compile Tests                                                     
       =================================================================== 
       -->
    <target name="compile-tests" depends="compile" description="Compile the test code">
        <mkdir dir="${test.classes}"/>
        <javac destdir="${test.classes}" excludes="**/package.html" debug="true" deprecation="true" optimize="false">
          <src>
            <pathelement location="src/test/java"/>
          </src>
          <classpath>
            <path refid="project.class.path"/>
          </classpath>
        </javac>
        <copy todir="${test.classes}">
          <fileset dir="src/test/resources"/>
        </copy>
      </target>
    <!--
       ===================================================================
                                      Run Tests                                                     
       =================================================================== 
       -->
      <target name="test" depends="compile-tests" description="Run the test cases">
        <mkdir dir="${test.report}"/>
        <junit printSummary="yes" haltonerror="true" haltonfailure="true" fork="true" dir=".">
          <sysproperty key="basedir" value="."/>
          <formatter type="xml"/>
          <formatter type="plain" usefile="false"/>
          <classpath>
            <path refid="project.class.path"/>
            <pathelement location="${test.classes}"/>
          </classpath>
          <batchtest todir="${test.report}">
            <fileset dir="src/test/java">
              <include name="**/*Test.java"/>
              <exclude name="**/*Abstract*Test.java"/>
            </fileset>
          </batchtest>
        </junit>
      </target>
</project>
