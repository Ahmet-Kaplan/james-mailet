<?xml version="1.0"?>
  <!DOCTYPE project [
    <!ENTITY check-targets SYSTEM "file:./check-targets.xml">
  ]>

<!-- 
==========================================================================

Mailet  build file 


  Licensed to the Apache Software Foundation (ASF) under one   
  or more contributor license agreements.  See the NOTICE file 
  distributed with this work for additional information        
  regarding copyright ownership.  The ASF licenses this file   
  to you under the Apache License, Version 2.0 (the            
  "License"); you may not use this file except in compliance   
  with the License.  You may obtain a copy of the License at   
                                                               
    http://www.apache.org/licenses/LICENSE-2.0                 
                                                               
  Unless required by applicable law or agreed to in writing,   
  software distributed under the License is distributed on an  
  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY       
  KIND, either express or implied.  See the License for the    
  specific language governing permissions and limitations      
  under the License.                                           
 
==============================================================================
-->

<project default="main" basedir=".">
    <!--
    Give user a chance to override without editing this file
    (and without typing -D each time he compiles it)
    -->
    <property file=".ant.properties"/>
    <property file="${user.home}/.ant.properties"/>
    <property file="check-targets.properties"/>
    <property file="include.properties"/>
    <property file="default.properties"/>

    <!--
    ===================================================================
    Set the classpath
    ===================================================================
    -->

    <path id="project.class.path">
        <pathelement location="${xercesImpl.jar}"/>
        <pathelement location="${xmlApis.jar}"/>        
        <pathelement location="${javax-mail.jar}"/>
        <pathelement location="${javax-activation.jar}"/>
        <pathelement location="${commons-digester.jar}"/>
        <pathelement location="${commons-collections.jar}"/>
        <pathelement location="${commons-beanutils.jar}"/>
        <pathelement location="${commons-logging.jar}"/>
        <pathelement location="${jakarta-oro.jar}"/>
        <pathelement location="${log4j.jar}"/>
        <pathelement location="${junit.jar}"/>
        <pathelement path="${java.class.path}" />
        <pathelement path="${build.classes}" />
    </path>

    <!--
    ===================================================================
                                Dependency Check
    ===================================================================
    -->

    &check-targets;
    <target name="check-dependencies" depends="javamail-check,activation-check"/>

    <!--
    ===================================================================
                                  Main target
    ===================================================================
    -->
    <target name="main" depends="dist-lite"/>

    <!--
    ===================================================================
    Prepare-common target - common tasks executed in preparation for
    all targets
    ===================================================================
    -->
    <target name="prepare" depends="check-dependencies">

      <echo message="Preparing code"/>

      <tstamp/>
      <mkdir dir="${dist.dir}"/>
      <copy todir="${dist.dir}">
        <fileset dir=".">
          <include name="LICENSE.txt"/>
          <include name="README.txt"/>
          <include name="NOTICE.txt"/>
        </fileset>
      </copy>
      <fixcrlf srcdir="${java.dir}" includes="**/*.java" eol="lf" tab="remove" tablength="4" />
      <fixcrlf srcdir="${java.dir}" includes="**/*.html" eol="lf" tab="remove" tablength="4" />
      <fixcrlf srcdir="${test.dir}" includes="**/*.java" eol="lf" tab="remove" tablength="4" />
      <fixcrlf srcdir="${xdocs.dir}" includes="**/*.xml" eol="lf" tab="remove" tablength="4" />
      <fixcrlf srcdir="${conf.dir}" includes="**/*.xml" eol="lf" tab="remove" tablength="4" />
      <fixcrlf srcdir="." includes="build.sh" eol="lf"/>
      <fixcrlf srcdir="." includes="build.bat" eol="crlf"/>
      <fixcrlf srcdir="." includes="build.xml" eol="lf"/>
      <!--fixcrlf srcdir="${javacc.dir}" includes="**/*.jj*" eol="lf" tab="remove" tablength="4" /-->
      <mkdir dir="${build.src}"/>
    </target>

    
    <!--
    ===================================================================
                                  compile
    ===================================================================
    -->
    <target name="compile" depends="compile-main"/>
    
    <target name="compile-main" depends="prepare">
      <echo message="Compiling Java sources"/>
      <mkdir dir="${build.classes}"/>
      <javac 
            destdir="${build.classes}" 
            debug="${debug}" 
            optimize="${optimize}" 
            deprecation="${deprecation}"
            source="${jdk.source}"
            target="${jdk.target}" 
            >
        <classpath refid="project.class.path"/>
        <src path="${build.src}"/>
        <src path="${java.dir}"/>
        <src path="${test.dir}"/>
        <include name="org/apache/mailet/**"/>
        <exclude name="**/samples/*/**"/>
      </javac>
      <copy todir="${build.classes}">
        <fileset dir="${java.dir}">
          <include name="**/*.properties"/>
        </fileset>
      </copy>   
      <copy todir="${build.classes}/META-INF" file='LICENSE.txt'/>
      <copy todir="${build.classes}/META-INF" file='NOTICE.txt'/>   
    </target>

    <!--
    ===================================================================
                                  Javadocs
    ===================================================================
    -->
    <target name="javadocs" depends="compile">

      <echo message="Making Mailet Javadocs"/>

      <delete dir="${build.javadocs}"/>
      <mkdir dir="${build.javadocs}"/>
      <javadoc failonerror="yes" packagenames="org.apache.mailet.*" excludepackagenames="org.apache.mailet.samples.*" destdir="${build.javadocs}">
        <sourcepath>
            <pathelement path="${java.dir}"/>
            <pathelement path="${build.src}"/>            
        </sourcepath> 
        <classpath refid="project.class.path"/>
        <doclet name="com.sun.tools.doclets.standard.Standard">
          <param name="-author"/>
          <param name="-version"/>
          <param name="-use"/>
          <param name="-breakiterator"/>
          <param name="-link" value="http://java.sun.com/j2se/1.4/docs/api"/>
          <param name="-link" value="http://java.sun.com/j2ee/sdk_1.3/techdocs/api"/>
          <param name="-doctitle" value="${Name} ${version}"/>
          <param name="-windowtitle" value="${Name} API"/>
          <param name="-bottom" value="&quot;Copyright &#169; ${year} Apache Jakarta Project. All Rights Reserved.&quot;"/>
        </doclet>
      </javadoc>
    </target>

    <!--
    ===================================================================
                                  build xdocs
    ===================================================================
    -->
    <target name="xdocs" depends="prepare">
      <style style="${docs.src}/stylesheets/site.xsl"
                basedir="${docs.src}/"
                destdir="${build.docs}/" 
                includes="**/*.xml" >
      </style>
      <copy todir="${build.docs}" filtering="no">
        <fileset dir="${docs.src}">
          <include name="**/*.css"/>
        </fileset>
      </copy>
      <copy todir="${build.docs}/images" filtering="no">
        <fileset dir="${docs.src}/images">
          <include name="**/*.gif"/>
          <include name="**/*.jpeg"/>
          <include name="**/*.jpg"/>
          <include name="**/*.png"/>
        </fileset>
      </copy>
      <mkdir dir="${dist.dir}/docs"/>
      <copy todir="${dist.dir}/docs" filtering="no">
        <fileset dir="${build.docs}"/>
      </copy>
    </target>

    <!--
    ===================================================================
                                build   website 
    ===================================================================
    -->
    <target name="website" depends="xdocs,javadocs">

      <echo message="preparing website in ${www.dir}"/>
      <delete quiet="true">
        <fileset dir="${www.dir}">
          <exclude name="CVS/**"/>
          <exclude name="rfclist/**"/>
          <exclude name="javadocs/**"/>
        </fileset>
      </delete>
      <mkdir dir="${www.dir}"/>
      <copy todir="${www.dir}" filtering="no">
        <fileset dir="${build.docs}"/>
      </copy>
      <copy todir="${www.dir}" filtering="no">
        <fileset dir="${build.dir}">
          <include name="javadocs/**"/>
        </fileset>
      </copy>
      <fixcrlf srcdir="${www.dir}" includes="**/*.html" eol="lf" tab="remove" tablength="4" />
      <fixcrlf srcdir="${www.dir}" includes="**/*.css" eol="lf" tab="remove" tablength="4" />
    </target>

    <!--
    ===================================================================
                Build everything
    ===================================================================
    -->
    <target name="everything" depends="clean,website,dist-bin,dist-src"/>

    <!--
    ===================================================================
                                  Build all distributions
    ===================================================================
    -->
    <target name="dist" depends="dist-bin,dist-src"/>

    <!--
    ===================================================================
                                  Make Mailet jars
    ===================================================================
    -->

    <target name="jar" depends="compile">

      <mkdir dir="${build.lib}"/>

      <!-- Make jSieve jar-->
      <echo message="Making Mailet Jar (${name}-${version}.jar)"/>
      <jar 
            jarfile="${build.lib}/${name}-${version}.jar" 
            basedir="${build.classes}">
          <include name="org/apache/mailet/**"/>
          <include name="META-INF/**"/> 
          <exclude name="**/junit/*/**"/>
          <exclude name="**/samples/*/**"/>
          <manifest> 
            <attribute name="Extension-Name" value='${extension.name}'/>
            <attribute name="Specification-Title" value='${title.spec}'/>
            <attribute name="Specification-Vendor" value='${vendor}'/>
            <attribute name="Specification-Version" value='${version}'/>
            <attribute name="Implementation-Vendor-Id" value='${vendor.id}'/>
            <attribute name="Implementation-Title" value='${title.impl}'/>
            <attribute name="Implementation-Vendor" value='${vendor}'/>
            <attribute name="Implementation-Version" value='${version}'/>
            <attribute name="X-Compile-Source-JDK" value='${jdk.source}'/>
            <attribute name="X-Compile-Target-JDK" value='${jdk.target}'/> 
          </manifest> 
      </jar>

      <!-- Make jSieve jUnit jar-->
      <echo message="Making Mailet jUnit Jar (${name}-jUnit-${version}.jar)"/>
      <jar jarfile="${build.lib}/${name}-jUnit-${version}.jar" basedir="${build.classes}">
            <include name="org/apache/mailet/junit/**"/>
            <manifest>
              <attribute name="Created-By" value='${creator}'/> 
              <attribute name="X-Compile-Source-JDK" value='${jdk.source}'/>
              <attribute name="X-Compile-Target-JDK" value='${jdk.target}'/> 
            </manifest>  
      </jar>
    </target>

    <!--
    ===================================================================
            Make dist directory with unpacked dist ready to run
    ===================================================================
    -->
    <target name="dist-lite" depends="dist-lite-test"/>

    <target name="dist-lite-build" depends="jar">

      <echo message="Installing Mailet to ${dist.dir}"/>

      <!--Copies the Mailet jars into ./dist/lib -->
      <copy todir="${dist.dir}/lib">
        <fileset dir="${build.lib}">
          <include name="*.jar"/>
        </fileset>
      </copy>

      <!--Copies the required support jars -->
      <!--copy todir="${dist.dir}/lib" file="${xercesImpl.jar}"/>
      <copy todir="${dist.dir}/lib" file="${xmlApis.jar}"/>        
      <copy todir="${dist.dir}/lib" file="${javax-mail.jar}"/>
      <copy todir="${dist.dir}/lib" file="${javax-activation.jar}"/>
      <copy todir="${dist.dir}/lib" file="${commons-digester.jar}"/>
      <copy todir="${dist.dir}/lib" file="${commons-collections.jar}"/>
      <copy todir="${dist.dir}/lib" file="${commons-beanutils.jar}"/>
      <copy todir="${dist.dir}/lib" file="${commons-logging.jar}"/>
      <copy todir="${dist.dir}/lib" file="${jakarta-oro.jar}"/>
      <copy todir="${dist.dir}/lib" file="${log4j.jar}"/-->

      <!--Copies the configuration files -->
    </target>

    <!--
    ===================================================================
                                  Test the dist-lite build
    ===================================================================
    -->    
    <target name="dist-lite-test" depends="dist-lite-build">
        <echo message="Testing dist-lite build"/>
        <mkdir dir="${dist.dir}/reports"/>
        <junit printsummary="yes" haltonfailure="yes" filtertrace="on">
            <!-- Uncomment this to remotely debug the tests
            <jvmarg line="-Xdebug -Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=y"/>
            -->
            <classpath id="junit.class.path">
                <fileset dir="${dist.dir}/lib">
                    <include name="**/*.jar"/>
                </fileset>
                <pathelement location="${dist.dir}/conf/"/>
                <pathelement path="${java.class.path}"/>
                <pathelement location="${junit.jar}"/>
            </classpath>
            <formatter type="plain"/>
            <batchtest fork="yes" todir="${dist.dir}/reports">
                <fileset dir="${build.classes}">
                    <include name="**/junit/*Test*.class"/>
                    <exclude name="**/junit/AllTests.class"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

    <!--
    ===================================================================
                                  binary distribution
    ===================================================================
    -->

    <target name="dist-bin" depends="dist-lite,xdocs,javadocs">
      <echo message ="Building binary distribution"/>
      <property name="dist.binary.dir" value="${dist.dir}/downloads/bin"/>
      <mkdir dir="${dist.binary.dir}"/>
        <zip zipfile="${dist.binary.dir}/${dist.name}-bin.zip">
            <fileset dir="${dist.dir}">
                <include name="lib/**"/>
                <include name="*.txt"/>
                <include name="KEYS"/>
            </fileset>
        </zip>
        <tar longfile="gnu" tarfile="${dist.binary.dir}/${dist.name}-bin.tar">
            <tarfileset dir="${dist.dir}" username="${name}" group="${name}">
                <include name="lib/**"/>
                <include name="*.txt"/>
                <include name="KEYS"/>
            </tarfileset>
        </tar>
        <gzip zipfile="${dist.binary.dir}/${dist.name}-bin.tar.gz" src="${dist.binary.dir}/${dist.name}-bin.tar"/>
        <delete file="${dist.binary.dir}/${dist.name}-bin.tar"/>
    </target>

    <!--
    ===================================================================
                                  source distributions
    ===================================================================
    -->
    <target name="dist-src" depends="dist-lite,xdocs,javadocs">
        <echo message ="Building source distributions"/>

        <property name="dist.source.dir" value="${dist.dir}/downloads/src"/>
        <mkdir dir="${dist.source.dir}"/>
        <zip zipfile="${dist.source.dir}/${dist.name}-src.zip">
            <fileset dir=".">
                <include name="src/**"/>
                <include name="lib/**"/>
                <include name="www/**"/>
                <include name="tools/**"/>
                <include name="*.xml"/>
                <include name="*.properties"/>
                <include name="*.txt"/>
                <include name="KEYS"/>
            </fileset>
        </zip>
        <tar longfile="gnu" tarfile="${dist.source.dir}/${dist.name}-src.tar">
            <tarfileset dir="." username="${name}" group="${name}">
                <include name="src/**"/>
                <include name="lib/**"/>
                <include name="www/**"/>
                <include name="tools/**"/>
                <include name="*.xml"/>
                <include name="*.properties"/>
                <include name="*.txt"/>
                <include name="KEYS"/>
            </tarfileset>
        </tar>
        <gzip zipfile="${dist.source.dir}/${dist.name}-src.tar.gz" src="${dist.source.dir}/${dist.name}-src.tar"/>
        <delete file="${dist.source.dir}/${dist.name}-src.tar"/>
    </target>
    
    <!--
    ===================================================================
                                  delete dist/, build/ and www/
    ===================================================================
    -->
    <target name="clean">
        <echo message ="deleting working directories ready for a clean build"/>
        <delete dir="${dist.dir}"/>
        <delete dir="${build.dir}"/>
        <delete dir="${www.dir}"/>
    </target>

    <!--
    ===================================================================
                                   Help on usage                                                       
    =================================================================== 
    -->
    <target name="usage">
        <echo message=""/>
        <echo message=""/>
        <echo message="Mailet Build file"/>
        <echo message="-------------------------------------------------------------"/>
        <echo message=""/>
        <echo message=" available targets are:"/>
        <echo message=""/>
        <echo message="   dist-lite --> generates unpacked distribution (default)"/>
        <echo message="   test      --> tests the jarred classes"/>
        <echo message="   website   --> makes all the docs and javadocs"/>
        <echo message="   compile   --> compiles the source code"/>
        <echo message="   dist      --> generates all the Mailet distributions, packed"/>
        <echo message="   clean     --> cleans up the directory"/>
        <echo message="   xdocs     --> creates the documentation for Mailet"/>
        <echo message="   javadocs  --> creates the Javadoc"/>
        <echo message=""/>
        <echo message=" See the comments inside the build.xml file for more details."/>
        <echo message="-------------------------------------------------------------"/>
        <echo message=""/>
        <echo message=""/>
    </target>
  
</project>
